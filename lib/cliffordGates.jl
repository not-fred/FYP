if !@isdefined CliffordAngles
    const CliffordAngles = [
        [ [0,0,1], 2 ],         # C₀  = I
        [ [1,0,0], -1/2 ],      # C₁  = R(x̂,-π/2)
        [ [1,0,0], 1/2 ],       # C₂  = R(x̂, π/2)
        [ [1,0,0], 1 ],         # C₃  = R(x̂, π)
        [ [0,1,0], -1/2 ],      # C₄  = R(ŷ,-π/2)
        [ [0,1,0], 1/2 ],       # C₅  = R(ŷ, π/2)
        [ [0,1,0], 1 ],         # C₆  = R(ŷ, π)
        [ [0,0,1], -1/2 ],      # C₇  = R(ẑ,-π/2)
        [ [0,0,1], 1/2 ],       # C₈  = R(ẑ, π/2)
        [ [0,0,1], 1 ],         # C₉  = R(ẑ, π)
        [ [ 1, 0, 1], 1 ],      # C₁₀ = R( x̂+ẑ,π) = H
        [ [ 1, 0,-1], 1 ],      # C₁₁ = R(-x̂+ẑ,π)
        [ [ 1, 1, 0], 1 ],      # C₁₂ = R( x̂+ŷ,π)
        [ [ 1,-1, 0], 1 ],      # C₁₃ = R( x̂-ŷ,π)
        [ [ 0, 1, 1 ],  1],     # C₁₄ = R( ŷ+ẑ,π)
        [ [ 0,-1, 1 ],  1],     # C₁₅ = R(-ŷ+ẑ,π)
        [ [ 1, 1, 1 ],  2/3],   # C₁₆ = R( x̂+ŷ+ẑ, ⅔π)
        [ [ 1, 1, 1 ], -2/3],   # C₁₇ = R( x̂+ŷ+ẑ,-⅔π)
        [ [-1,-1, 1 ], -2/3],   # C₁₈ = R(-x̂-ŷ+ẑ,-⅔π)
        [ [-1,-1, 1 ],  2/3],   # C₁₉ = R(-x̂-ŷ+ẑ, ⅔π)
        [ [ 1,-1, 1 ],  2/3],   # C₂₀ = R( x̂-ŷ+ẑ, ⅔π)
        [ [ 1,-1, 1 ], -2/3],   # C₂₁ = R( x̂-ŷ+ẑ,-⅔π)
        [ [-1, 1, 1 ],  2/3],   # C₂₂ = R(-x̂+ŷ+ẑ, ⅔π)
        [ [-1, 1, 1 ], -2/3]    # C₂₃ = R(-x̂+ŷ+ẑ,-⅔π)
    ]

    const CliffordProductJI = [
        1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24;
        2 4 1 3 20 22 16 18 23 15 17 24 19 21 7 10 6 13 8 12 9 11 14 5;
        3 1 4 2 24 17 15 19 21 16 22 20 18 23 10 7 11 8 13 5 14 6 9 12;
        4 3 2 1 12 11 10 13 14 7 6 5 8 9 16 15 22 19 18 24 23 17 21 20;
        5 18 21 11 7 1 6 24 20 12 10 4 17 22 23 19 9 15 3 13 16 8 2 14;
        6 23 19 12 1 7 5 22 17 11 4 10 20 24 18 21 13 2 16 9 3 14 15 8;
        7 15 16 10 6 5 1 14 13 4 12 11 9 8 2 3 20 23 21 17 19 24 18 22;
        8 22 24 14 18 19 13 10 1 9 21 23 4 7 17 20 3 11 12 2 5 16 6 15;
        9 20 17 13 21 23 14 1 10 8 18 19 7 4 24 22 15 5 6 16 11 2 12 3;
        10 16 15 7 11 12 4 9 8 1 5 6 14 13 3 2 24 21 23 22 18 20 19 17;
        11 21 18 5 4 10 12 17 22 6 1 7 24 20 19 23 8 3 15 14 2 9 16 13;
        12 19 23 6 10 4 11 20 24 5 7 1 22 17 21 18 14 16 2 8 15 13 3 9;
        13 17 20 9 19 18 8 7 4 14 23 21 1 10 22 24 2 6 5 3 12 15 11 16;
        14 24 22 8 23 21 9 4 7 13 19 18 10 1 20 17 16 12 11 15 6 3 5 2;
        15 10 7 16 17 24 3 23 18 2 20 22 21 19 1 4 5 9 14 11 13 12 8 6;
        16 7 10 15 22 20 2 21 19 3 24 17 23 18 4 1 12 14 9 6 8 5 13 11;
        17 9 13 20 3 15 24 6 11 22 2 16 5 12 8 14 18 1 7 21 4 23 10 19;
        18 11 5 21 13 8 19 15 2 23 9 14 3 16 6 12 1 17 24 4 20 10 22 7;
        19 6 12 23 8 13 18 16 3 21 14 9 2 15 11 5 4 22 20 1 24 7 17 10;
        20 13 9 17 16 2 22 5 12 24 15 3 6 11 14 8 23 7 1 19 10 18 4 21;
        21 5 11 18 14 9 23 3 16 19 8 13 15 2 12 6 10 24 17 7 22 1 20 4;
        22 14 8 24 2 16 20 11 6 17 3 15 12 5 13 9 19 4 10 23 1 21 7 18;
        23 12 6 19 9 14 21 2 15 18 13 8 16 3 5 11 7 20 22 10 17 4 24 1;
        24 8 14 22 15 3 17 12 5 20 16 2 11 6 9 13 21 10 4 18 7 19 1 23
    ]

    const CliffordInverse = [
        1, 3, 2, 4, 6, 5,
        7, 9, 8, 10, 11, 12,
        13, 14, 15, 16, 18, 17,
        20, 19, 22, 21, 24, 23
    ]
end

function getCn(i::Int)
    return CliffordAngles[i]
end

function getCproduct(j::Int, i::Int)
    return CliffordProductJI[j,i]
end

function getCinverse(i::Int)
    return CliffordInverse[i]
end
